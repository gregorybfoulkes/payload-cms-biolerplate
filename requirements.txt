# Requirments
# pip install -r requirements.txt

## Learn
    - numpy
    - pandas
    - scikit-learn     
    - matplotlib          
    - seaborn          
    - plotly
    - streamlit         
    - xgboost           
    - lightgbm          
    - catboost          
    - tensorflow        
    - keras             
    - pytorch           
    - torchvision       
    - pytorch-lightning

## Dev
    - pytest
    - flake8
    - Configuration functionality
    - Git functionality
    - Docker
    - AWS
    - Azure
    - GCP
    - Jenkins
    - CircleCI
    - Gitlab
    - Heroku

## AI
    - OpenAI
    - Azure OpenAI
    - Cohere
    - Huggingface
    - Google
    - Microsoft
    - IBM
    - Amazon
    - DeepL
    - Deepgram
    - ElevenLabs
    - Mistral
    - ChatGPT
    - Midjourney
    - DALL-E
    - Bard

```python
    import os
    from mistralai import Mistral

    api_key = os.environ["MISTRAL_API_KEY"]
    model = "mistral-embed"

    client = Mistral(api_key=api_key)
    response = client.embed(model=model, text="Hello, world!")
    print(response)

    # Output: {'embeddings': [[0.1, 0.2, 0.3, 0.4, 0.5]]}
'''

'''python
    import catboost
    from catboost import CatBoost, Pool

    train_data = [
        [1, 2, 3],
        [4, 5, 6],
        [7, 8, 9],
    ]
    train_labels = [0, 1, 0]    

    train_pool = Pool(train_data, label=train_labels)
    model = CatBoost(<train_params>)
    model.fit(train_pool)
    model.save_model(OUTPUT_PYTHON_MODEL_PATH, format="python")
'''
payload-cms-boilerplate/
│
├── .gitignore               # Git ignore file
├── .env                     # Environment variables
├── README.md                # Project documentation
├── requirements.txt         # Project dependencies
├── data.json                # Data storage
│
├── src/                     # Source code directory
│   ├── __init__.py          # Makes src a package
│   ├── app.py               # Main application file
│   ├── content_manager.py    # Content management logic
│   ├── models/              # Directory for data models
│   │   ├── __init__.py      # Makes models a package
│   │   └── content.py       # Content model (if needed)
│   ├── services/            # Directory for services (business logic)
│   │   ├── __init__.py      # Makes services a package
│   │   └── api_service.py   # API related functionalities
│   ├── utils/               # Utility functions
│   │   ├── __init__.py      # Makes utils a package
│   │   └── helpers.py       # Helper functions
│   └── tests/               # Test directory
│       ├── __init__.py      # Makes tests a package
│       └── test_app.py      # Tests for the main application
│
├── scripts/                 # Scripts for maintenance and automation
│   ├── maintenance.sh        # Bash script for maintenance tasks
│   └── setup.sh             # Bash script for setup tasks (if needed)
│
└── config/                  # Configuration files
    ├── config.yaml          # Configuration settings (if needed)
    └── logging.yaml         # Logging configuration (if needed)